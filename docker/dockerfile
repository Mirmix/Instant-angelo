# Use multi-stage builds
FROM nvidia/cuda:11.8.0-devel-ubuntu22.04

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    pkg-config \
    libgl1 \
    cmake \
    curl \
    python3-pip \
    python3.10-venv \
    git \
    g++ \
    gcc \
    python3-dev \
    build-essential && \
    # Clean up in the same RUN instruction
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Create a virtual environment
RUN python3 -m venv /opt/venv


# Install packages into the virtual environment
RUN /opt/venv/bin/pip install --upgrade pip -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com && \
    /opt/venv/bin/pip install torch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com  && \
    /opt/venv/bin/pip install git+https://github.com/NVlabs/tiny-cuda-nn/#subdirectory=bindings/torch && \
    /opt/venv/bin/pip install ninja imageio imageio-ffmpeg trimesh && \
    # Clean up in the same RUN instruction
    rm -r ~/.cache/pip

COPY requirements.txt . 
RUN /opt/venv/bin/pip install -r requirements.txt -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com && \
    rm -r ~/.cache/pip

# Make the virtual environment the default Python runtime
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility,graphics

# Default pyopengl to EGL for good headless rendering support
ENV PYOPENGL_PLATFORM egl

COPY 10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json
RUN python -m nerfacc.cuda._backend